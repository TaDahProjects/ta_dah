plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // Spring
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'

    // Jacoco
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // AssertJ
    testImplementation 'org.assertj:assertj-core:3.18.1'

    // Mockito Core
    testImplementation 'org.mockito:mockito-core:4.0.0'

    // Mockito Inline
    testImplementation 'org.mockito:mockito-inline:4.0.0'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'

    // Spring Boot Test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.tadah.TaDah'
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = "CLASS"

            limit {
                counter = 'LINE'
                minimum = 1
            }

            limit {
                counter = 'BRANCH'
                minimum = 1
            }
        }
    }
}